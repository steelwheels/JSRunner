# jsh: Extended JavaScript for Shell Scripting

## Introduction
This document describes about `jsh`. The jsh is small extension of JavaScript language to implement shell script easily.

The [bourne shell](https://en.wikipedia.org/wiki/Bourne_shell) and [csh](https://en.wikipedia.org/wiki/C_shell)  are popular to implement the shell script. But these syntax are very unique and inconsistent.
If you use `jsh`, you can implement the script based the JavaScript syntax.

The shell program [jsh](https://github.com/steelwheels/JSTools/blob/master/Document/jsh-man.md)
supports this language.

## Features
This is the feature jsh:
* Support mixed description JavaScript and shell script.
* The data flow is managed by shell script (called as `shell-statement`)
* The control flow is managed by JavaScript

Here is a sample script to print welcome message.
````
m4_include(hello0.jsh)
````
The execution result is:
````
m4_include(hello0.txt)
````

## Syntax
Following line is recognized as shell statement.
This is full declaration of shell statement.
````
(in, out, err, env): exit > ... shell statement ...
````

Each parameter has default value. It is used when the parameter value is omitted.

|Name   |Type           |Description                            |
|:---   |:---           |:---                                   |
|in     |File           |Input file for shell statement. Default value is `stdin`. |
|out    |File           |Output file. Default value is `stdout`. |
|err    |File           |File for error. Default value is `stderr`. |
|env    |Dictionary     |Set of environment values. Default value is none. |
|exit   |Int            |Exit code set by execution result. |

Some parameters can be omitted:
````
(in, out, err) : exit      > ... shell statement ...   # 1
(in, out, err, env) : exit > ... shell statement ...   # 2
(in, out, err, env)        > ... shell statement ...   # 3
(in, out, err)             > ... shell statement ...   # 4
                           > ... shell statement ...   # 5
````

## Pipeline programming
### Process and Thread
This section describes about how to implement pipeline by JavaScript
(without extended syntax).
There are some built in functions to generate process and thread:
* [system](https://github.com/steelwheels/KiwiScript/blob/master/KiwiLibrary/Document/Function/System.md):
Execute the shell script on the other process
* [thread](https://github.com/steelwheels/KiwiScript/blob/master/KiwiLibrary/Document/Function/Thread.md):
Execute the java script on the other thread

The [pipe](https://github.com/steelwheels/KiwiScript/blob/master/KiwiLibrary/Document/Class/Pipe.md)
object is used to connect the data stream between process and threads.
Here is an example to execute 2 processes that they are connect by pipe.
````
/* The "pipe" variables used to connect 2 processes */
let pipe     = Pipe() ;
let process0 = system("ls", stdin, pipe.writing, stderr) ;
let process1 = system("wc -l", pipe.reading, stdout, stderr) ;
process0.waitUntilExit() ;
process1.waitUntilExit() ;
````

## Samples
### 1. Hello, world !!
You can use *pipe* and define *multiple statements* separated by ';'.
The file `stdin`, `stdout` and `stderr` are used.
````
m4_include(hello1.jsh)
````
The execution result is:
````
m4_include(hello1.txt)
````

### 2. File streams
You can use [Pipe](https://github.com/steelwheels/KiwiScript/blob/master/KiwiLibrary/Document/Class/Pipe.md) to connect file stream.
````
m4_include(pipe2.js)
````

# Related document
* [README.md](https://github.com/steelwheels/JSRunner/blob/master/README.md): Top level document of this application.
* [Pysh](https://www.yunabe.jp/docs/pysh_overview.html): How to write Pysh script in Japanese.
* [Steel Wheels Project](http://steelwheels.github.io): Web site of developer.
